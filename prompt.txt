You are a professional front-end flutter developer.

Develop a financial recording web-app, that could view a person expense history.

Information of prompt returns
1. Assume the device install with nothing, provide step-by-step guidelines from setup to run the app.
2. Specify the version of the dependency and tools on every single command and code execution.
3. List the file structure of the project. If the file is generated by command, provide the command below.
4. Generate the code of the functionality, tell me where the generated code should be paste to

3 Functionanlity of the Flutter web-app
1. Login with Google Account: The user could login with Google account within the app
2. Upload an expense form: The user could fill in the form with the entry, and upload the record in Google sheet and the receipt to Google Drive of the user account.  For the details, it will list in below.
3. View the expenses: The user could view the total amount by different criteria.  For the details, it will list in below.

```7 requirements of the Flutter web-app```
1. Styling: Design a visually appealing and user-friendly interface.
- Clean, minimalist interface
- High contrast action elements

2. Error Handling: Implement robust error handling to gracefully handle issues like network errors, file upload failures, or server-side errors.
- Validate all API responses
- Provide specific, actionable error messages
- Maintain application state integrity
- Prevent unnecessary re-renders

3. User Experience: Provide clear feedback to the user, such as progress indicators, success messages, and error notifications.
- Responsive layout
- Clear visual hierarchy
- Inline status messaging
- All loading animation or loading status
- Clear and concise error messages

4. Performance Optimization: Optimize the file upload and download processes to minimize latency and improve user experience, especially for large files.
- Optimize file upload and download performance
- Minimize network requests
- Implement caching strategies
- Use appropriate file formats and compression techniques

5. Accessibility: Design the application to be accessible to users with disabilities, following accessibility guidelines of WCAG.
- Follow accessibility best practices
- Ensure accessibility for all users, including visually impaired users
- Use semantic HTML elements
- Use appropriate ARIA attributes

6. Security: Implement security measures to protect against common vulnerabilities, such as cross-site scripting (XSS), SQL injection, and file upload vulnerabilities.
- Implement security measures

7. Suggested enhancements
- Create progress indicators for uploads
- Implement drag-and-drop upload
- Validate user input
- Use secure file upload protocols
```````

```5 pages for the Flutter web-app```
1. Login with Google Account: The user could login with Google account within the app
2. Dashboard: The user could know the total amount of the expenses of this month, and show the difference between last month.
3. Upload an expense form: The user could fill in the form with the entry, and upload the record in Google sheet and the receipt to Google Drive of the user account.
4. View the expenses: The user could view the total amount by different criteria.
5. Settings: The user could change the user account information.
``````

```Upload an expense form (Data)```
- Receipt File: It should be an image
- Item: text field mentioning what is in the file
- Date: date field mentioning the date of the expense
- Category: Drop down fields the budget
     - Housing
        -- Mortgage or rent
        -- Property taxes
        -- Household repairs
        -- HOA fees
        -- Transportation

   - Car payment
        -- Car warranty
        -- Gas
        -- Tires
        -- Maintenance and oil changes
        -- Parking fees
        -- Repairs
        -- Registration and DMV Fees
        -- Food

   - Groceries
        -- Restaurants
        -- Pet food
        -- Utilities

  - Electricity
        -- Water
        -- Garbage
        -- Phones
        -- Cable
        -- Internet
  - Clothing
        -- Adults’ clothing
        -- Adults’ shoes
        -- Children’s clothing
        -- Children’s shoes
        -- Medical/Healthcare

  - Primary care
        -- Dental care
        -- Specialty care (dermatologists, orthodontics, optometrists, etc.)
        -- Urgent care
        -- Medications
        -- Medical devices
        -- Insurance

  - Health insurance
        -- Homeowner’s or renter’s insurance
        -- Home warranty or protection plan
        -- Auto insurance
        -- Life insurance
        -- Disability insurance
        -- Household Items/Supplies

  - Toiletries
        -- Laundry detergent
        -- Dishwasher detergent
        -- Cleaning supplies
        -- Tools
        -- Personal

  - Gym memberships
        -- Haircuts
        -- Salon services
        -- Cosmetics (like makeup or services like laser hair removal)
        -- Babysitter
        -- Subscriptions
        -- Debt
  - Education
        -- Children’s college
        -- Your college
        -- School supplies
        -- Books
  - Savings
        -- Emergency fund
        -- Big purchases like a new mattress or laptop
        -- Other savings
  - Gifts/Donations
        -- Birthday
        -- Anniversary
        -- Wedding
        -- Christmas
        -- Special occasion
        -- Charities
  - Entertainment 
        -- Alcohol and/or bars
        -- Games
        -- Movies
        -- Concerts
        -- Vacations
        -- Subscriptions (Netflix, Amazon, Hulu, etc.)
- Price: number field
- Currency: Drop down field of the currency of the expense
``````

```Upload an expense form (Form upload behavior)```
Ensure there is a folder named "Expense History (Automated)" under the root folder of the user google account
For the receipt file, it should be renamed automatically to the current datetime with the item name (ie: "<Name of the item>_<current date and time>.png") and uploaded to the Google Drive of the user account by creating a new folder named "Receipt" under the "Expense History (Automated)" folder of the user account.
For other rest of the data, it should be written to the Google Sheet of the user account's spreadsheet named "Expense Record" under the "Expense History (Automated)" folder of the user account and worksheet named "<Month> <Year> Expense" inside the "Expense Record" spreadsheet.
If the file, worksheet, spreadsheet, or folder does not exist, it should be created automatically.
The record should be inserted to the first row of the sheet by name of "Date", "Item", "Category", "Price", "Currency", and "Receipt File".  If it is newly created, remember to insert the header.
```````

```View the expenses```
1. The user could choose the month to view the total amount
2. The user could choose the category to view the total amount
3. The user could compare the total amount between the two months to view the difference
4. The user could view each single record of the expenses by paging with month.
```````

```Settings```
Leave it empty for now
`````

```Error handling```
1. If the user is not logged in, it should redirect to the login page
2. If the user is logged in, it should redirect to the dashboard page
3. For input error, display the error message on the form and highlight the input field
4. For server error, display the error message with a snackbar
5. For analytic error, display the error message with a snackbar
``````

```Backend```
1. The expense form data stored in Google Drive and Google Sheet
2. The user account information through Google account login
3. Google Drive API, Google Sheet API, and Google account API should be used. Do not use any other services.
``````


The AI must generate all the code required to create this app in one go. It should also iterate internally to ensure the app is bug-free and fully functional.